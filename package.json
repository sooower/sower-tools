{
    "name": "sower-tools",
    "displayName": "Sower Tools",
    "description": "A collection of commonly used tools for VSCode.",
    "version": "0.17.3",
    "publisher": "Sower",
    "icon": "assets/icon.png",
    "license": "UNLICENSED",
    "repository": {
        "type": "gitea",
        "url": "https://gitea.sower.fun/sower/sower-tools"
    },
    "main": "./dist/extension.js",
    "scripts": {
        "vscode:prepublish": "yarn run package",
        "compile": "yarn run check-types && yarn run lint && node esbuild.js",
        "watch": "npm-run-all -p watch:*",
        "watch:esbuild": "node esbuild.js --watch",
        "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
        "package": "yarn run check-types && yarn run lint && node esbuild.js --production",
        "compile-tests": "tsc -p . --outDir out",
        "watch-tests": "tsc -p . -w --outDir out",
        "pretest": "yarn run compile-tests && yarn run compile && yarn run lint",
        "check-types": "tsc --noEmit",
        "lint": "eslint src --ext ts",
        "format": "prettier --ignore-path .prettierignore --write './src/**/*.{ts,js}'",
        "test": "vscode-test"
    },
    "devDependencies": {
        "@types/markdown-it": "^14.1.1",
        "@types/mocha": "^10.0.6",
        "@types/node": "18.x",
        "@types/pluralize": "^0.0.33",
        "@types/prettier": "2.7.1",
        "@types/vscode": "^1.89.0",
        "@typescript-eslint/eslint-plugin": "^7.7.1",
        "@typescript-eslint/parser": "^7.7.1",
        "@vscode/test-cli": "^0.0.9",
        "@vscode/test-electron": "^2.3.9",
        "esbuild": "^0.20.2",
        "eslint": "^8.57.0",
        "eslint-plugin-import": "^2.31.0",
        "eslint-plugin-perfectionist": "^4.4.0",
        "npm-run-all": "^4.1.5",
        "ts-node": "^10.9.2",
        "tsconfig-paths": "^4.2.0",
        "typescript": "^5.4.5"
    },
    "dependencies": {
        "@utils/command": "^0.2.2",
        "@utils/common": "^0.2.6",
        "@utils/datetime": "^0.2.4",
        "@utils/fs": "^0.3.2",
        "@utils/json": "^0.4.2",
        "ignore": "^7.0.3",
        "markdown-it": "^14.1.0",
        "minio": "^8.0.4",
        "pluralize": "^8.0.0",
        "prettier": "2.8.8",
        "remark-parse": "^11.0.0",
        "ts-morph": "^25.0.1",
        "unist-util-visit": "^5.0.0",
        "zod": "^3.24.1"
    },
    "engines": {
        "vscode": "^1.89.0"
    },
    "categories": [
        "Other"
    ],
    "activationEvents": [
        "onLanguage"
    ],
    "extensionDependencies": [
        "shd101wyy.markdown-preview-enhanced"
    ],
    "vsce": {
        "yarn": true
    },
    "contributes": {
        "commands": [
            {
                "command": "sower-tools.debuggingEnhancement.debugProject",
                "title": "Debug Project",
                "icon": "$(bug)"
            },
            {
                "command": "sower-tools.debuggingEnhancement.debugCurrentFile",
                "title": "Debug Current File",
                "icon": "$(debug-alt)"
            },
            {
                "command": "sower-tools.gitEnhancement.skipWorkTree",
                "title": "Skip Work Tree"
            },
            {
                "command": "sower-tools.gitEnhancement.noSkipWorkTree",
                "title": "No Skip Work Tree"
            },
            {
                "command": "sower-tools.gitEnhancement.listSkippedFiles",
                "title": "List Skipped Files"
            },
            {
                "command": "sower-tools.gitEnhancement.forcePush",
                "title": "Force Push to..."
            },
            {
                "command": "sower-tools.apiResourcesGeneration.generateAPIResources",
                "title": "Generate API Resources"
            },
            {
                "command": "sower-tools.dirEnhancement.openFiles",
                "title": "Open Files"
            },
            {
                "command": "sower-tools.projectEnhancement.openProjects",
                "title": "Open Projects"
            },
            {
                "command": "sower-tools.configSync.cursor.pushProfile",
                "title": "Push Cursor Profile"
            },
            {
                "command": "sower-tools.configSync.cursor.pullProfile",
                "title": "Pull Cursor Profile"
            },
            {
                "command": "sower-tools.apiRequestAssistant.referToEnvVariables",
                "title": "Refer to Env Variables",
                "icon": "$(zap)"
            }
        ],
        "menus": {
            "editor/context": [
                {
                    "group": "001_sowerTools@001",
                    "submenu": "editor/context/sowerTools"
                }
            ],
            "editor/context/sowerTools": [
                {
                    "command": "sower-tools.apiRequestAssistant.referToEnvVariables",
                    "group": "001_apiRequestAssistant@001",
                    "when": "resourceLangId == typescript"
                },
                {
                    "command": "sower-tools.debuggingEnhancement.debugCurrentFile",
                    "group": "002_debuggingEnhancement@001",
                    "when": "resourceLangId == typescript"
                },
                {
                    "command": "sower-tools.debuggingEnhancement.debugProject",
                    "group": "002_debuggingEnhancement@002",
                    "when": "resourceLangId == typescript"
                }
            ],
            "editor/title": [
                {
                    "command": "sower-tools.apiRequestAssistant.referToEnvVariables",
                    "group": "navigation@001",
                    "when": "resourceLangId == typescript"
                },
                {
                    "command": "sower-tools.debuggingEnhancement.debugCurrentFile",
                    "group": "navigation@002",
                    "when": "resourceLangId == typescript"
                },
                {
                    "command": "sower-tools.debuggingEnhancement.debugProject",
                    "group": "navigation@003",
                    "when": "resourceLangId == typescript"
                }
            ],
            "explorer/context": [
                {
                    "group": "001_sowerTools@001",
                    "submenu": "explorer/context/sowerTools"
                }
            ],
            "explorer/context/sowerTools": [
                {
                    "group": "001_git@001",
                    "submenu": "explorer/context/sowerTools/git"
                },
                {
                    "command": "sower-tools.apiResourcesGeneration.generateAPIResources",
                    "group": "001_apiResourcesGeneration@001",
                    "when": "explorerResourceIsFolder == true"
                },
                {
                    "command": "sower-tools.dirEnhancement.openFiles",
                    "group": "001_dirEnhancement@001",
                    "when": "explorerResourceIsFolder == true"
                }
            ],
            "explorer/context/sowerTools/git": [
                {
                    "command": "sower-tools.gitEnhancement.skipWorkTree",
                    "group": "001_gitEnhancement@001",
                    "when": "explorerResourceIsFolder == false && resourceLangId != ''"
                },
                {
                    "command": "sower-tools.gitEnhancement.noSkipWorkTree",
                    "group": "001_gitEnhancement@002",
                    "when": "explorerResourceIsFolder == false && resourceLangId != ''"
                }
            ],
            "scm/title": [
                {
                    "command": "sower-tools.gitEnhancement.forcePush",
                    "group": "inline@001"
                },
                {
                    "command": "sower-tools.gitEnhancement.listSkippedFiles",
                    "group": "inline@002"
                }
            ]
        },
        "submenus": [
            {
                "id": "editor/context/sowerTools",
                "label": "Sower Tools"
            },
            {
                "id": "explorer/context/sowerTools",
                "label": "Sower Tools"
            },
            {
                "id": "explorer/context/sowerTools/git",
                "label": "Git"
            }
        ],
        "configuration": {
            "type": "object",
            "title": "Sower Tools",
            "properties": {
                "sower-tools.shared.uppercaseWordsMapping": {
                    "description": "Words pairs which will be used to map words when to uppercase, format: <originalWord>:<mappedWord>.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "Id:ID"
                    ]
                },
                "sower-tools.databaseModel.enableOverwriteFile": {
                    "description": "If true, it will replace file content with generated text if the file exists.",
                    "type": "boolean",
                    "default": false
                },
                "sower-tools.databaseModel.ignoredInsertionColumns": {
                    "description": "Column names which will be ignored when generating method `insert()` in database model.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "createdAt",
                        "updatedAt"
                    ]
                },
                "sower-tools.databaseModel.ignoredUpdatingColumns": {
                    "description": "Column names which will be ignored when generating method `update()` in database model.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "id",
                        "createdAt",
                        "updatedAt"
                    ]
                },
                "sower-tools.debuggingEnhancement.debugProjectConfigurationNames": {
                    "description": "Array of name (location at <projectRootDir>/.vscode/launch.json#configurations) of debugging the project. The priority depends on the array element order, the first element has the highest priority.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "Debug Project"
                    ]
                },
                "sower-tools.debuggingEnhancement.debugCurrentFileConfigurationNames": {
                    "description": "Array of name (location at <projectRootDir>/.vscode/launch.json#configurations) of debugging the opened file. The priority depends on the array element order, the first element has the highest priority.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "Current TS File"
                    ]
                },
                "sower-tools.readmeDocumentPreview.enable": {
                    "description": "If true, it will show project README file (configured in 'sower-tools.readmeDocumentPreview.documentNames') when open workspace.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.readmeDocumentPreview.documentNames": {
                    "description": "Array of project README filenames, priority depends on the array element order, the first element has the highest priority.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "README.md",
                        "readme.md",
                        "CHANGELOG.md",
                        "changelog.md"
                    ]
                },
                "sower-tools.nodeBuiltinModulesImportsUpdate.enable": {
                    "description": "If true, it will update node builtin modules imports with prefix 'node:' after saving a opened file.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.nodeBuiltinModulesImportsUpdate.nodeBuiltinModules": {
                    "description": "Array of node builtin modules names which will be updated with prefix 'node:', others will be ignored.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "assert",
                        "async_hooks",
                        "buffer",
                        "child_process",
                        "cluster",
                        "console",
                        "constants",
                        "crypto",
                        "dgram",
                        "dns",
                        "domain",
                        "events",
                        "fs",
                        "http",
                        "http2",
                        "https",
                        "inspector",
                        "module",
                        "net",
                        "os",
                        "path",
                        "perf_hooks",
                        "process",
                        "punycode",
                        "querystring",
                        "readline",
                        "repl",
                        "stream",
                        "string_decoder",
                        "timers",
                        "tls",
                        "trace_events",
                        "tty",
                        "url",
                        "util",
                        "v8",
                        "vm",
                        "worker_threads",
                        "zlib"
                    ]
                },
                "sower-tools.stringTools.enableReplaceText": {
                    "description": "If true, it will replace the selected text with converted text when encoding/decoding base64 string, otherwise it will insert the converted text after next line.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.statusBarEnhancement.nowTimestamp.enable": {
                    "description": "If true, it will show current timestamp in status bar.",
                    "type": "boolean",
                    "default": false
                },
                "sower-tools.statusBarEnhancement.countdownTimer.options": {
                    "description": "Array of options of countdown timer, each option contains a 'label' (displayed in select list) and a 'duration' (used to calculate the countdown timer, time in seconds).",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                                "description": "The label of the option."
                            },
                            "duration": {
                                "type": "number",
                                "description": "The duration of the option in seconds."
                            }
                        },
                        "required": [
                            "label",
                            "duration"
                        ]
                    },
                    "default": [
                        {
                            "label": "10 seconds",
                            "duration": 10
                        },
                        {
                            "label": "10 minutes",
                            "duration": 600
                        },
                        {
                            "label": "20 minutes",
                            "duration": 1200
                        },
                        {
                            "label": "40 minutes",
                            "duration": 2400
                        },
                        {
                            "label": "1 hour",
                            "duration": 3600
                        },
                        {
                            "label": "2 hours",
                            "duration": 7200
                        }
                    ]
                },
                "sower-tools.keyCryptoTools.key": {
                    "description": "The key for encrypting/decrypting text you selected in the editor.",
                    "type": "string",
                    "default": ""
                },
                "sower-tools.dirEnhancement.openFiles.ignoredFilenames": {
                    "description": "Array of filenames that will be ignored when clicked 'Open Files' in the context menu of explorer.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        ".DS_Store"
                    ]
                },
                "sower-tools.markdownEnhancement.localImage.enableUploadImage": {
                    "description": "If true, it will check local image links in markdown files and provide a code action to upload them to file server.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.markdownEnhancement.localImage.uploadImageConfigFilePath": {
                    "description": "The config file path for uploading images to file server, supports path alias '~'.",
                    "type": "string",
                    "default": "~/.config/sower-tools/.upload-image-config.json"
                },
                "sower-tools.markdownEnhancement.blankLinesRemoval.languageIds": {
                    "description": "Array of supported markdown code blocks language ids (case sensitive) which will maintain the blank lines in code blocks, others languages will remove blank lines in code blocks.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "typescript",
                        "ts",
                        "sql",
                        "javascript",
                        "js",
                        "json",
                        "yaml",
                        "yml",
                        "bash",
                        "sh",
                        "text",
                        "txt",
                        "python",
                        "go",
                        "rust",
                        "c"
                    ]
                },
                "sower-tools.markdownEnhancement.blankLinesRemoval.skipFirstLine": {
                    "description": "If true, it will skip copying the first line text of the document when removing blank lines in markdown file.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.completionItemEnhancement.logPrinting.patterns": {
                    "description": "The mapping patterns of log printing, when your input matches the trigger and you selected the completion item, it will be replaced with the replacement.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "trigger": {
                                "type": "string",
                                "description": "The trigger of the log printing."
                            },
                            "replacement": {
                                "type": "string",
                                "description": "The replacement of the log printing."
                            }
                        },
                        "required": [
                            "trigger",
                            "replacement"
                        ]
                    },
                    "default": [
                        {
                            "trigger": "{{varName}}.log",
                            "replacement": "console.log(\"{{varName}}:\", {{varName}});"
                        },
                        {
                            "trigger": "{{varName}}.info",
                            "replacement": "console.info(\"{{varName}}:\", {{varName}});"
                        },
                        {
                            "trigger": "{{varName}}.debug",
                            "replacement": "console.debug(\"{{varName}}:\", {{varName}});"
                        },
                        {
                            "trigger": "{{varName}}.warn",
                            "replacement": "console.warn(\"{{varName}}:\", {{varName}});"
                        },
                        {
                            "trigger": "{{varName}}.error",
                            "replacement": "console.error(\"{{varName}}:\", {{varName}});"
                        }
                    ]
                },
                "sower-tools.styleCheck.ignore.patterns": {
                    "description": "The 'glob' patterns of files or directories that will be ignored when checking style. The priority is higher than configured items in 'sower-tools.styleCheck.ignore.compatibleConfigFilenames'.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "node_modules/",
                        "dist/",
                        "build/"
                    ]
                },
                "sower-tools.styleCheck.ignore.compatibleConfigFilenames": {
                    "description": "The compatible config filenames that their contents will be split by line and added to the ignore list of style check. The priority is lower than configured items in 'sower-tools.styleCheck.ignore.patterns'.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        ".eslintignore",
                        ".prettierignore",
                        ".gitignore"
                    ]
                },
                "sower-tools.styleCheck.comment.enable": {
                    "description": "If true, the comment style of the opened file will be checked.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.styleCheck.comment.skipCheckCharacter": {
                    "description": "The character that will be used to skip the comment check. For example, if you set this value to '?', it will ignore checking the comment like '//? <text>', '/*? <text> */' or '/**? <text> */'.",
                    "type": "string",
                    "default": "?"
                },
                "sower-tools.styleCheck.classDeclaration.enable": {
                    "description": "If true, the class declaration style of the opened file will be checked.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.styleCheck.functionDeclaration.enable": {
                    "description": "If true, the function declaration style of the opened file will be checked.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.styleCheck.importStatement.enable": {
                    "description": "If true, the import statement style of the opened file will be checked.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.styleCheck.interfaceDeclaration.enable": {
                    "description": "If true, the interface declaration style of the opened file will be checked.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.styleCheck.returnStatement.enable": {
                    "description": "If true, the return statement style of the opened file will be checked.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.styleCheck.typeDeclaration.enable": {
                    "description": "If true, the type declaration style of the opened file will be checked.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.styleCheck.continueStatement.enable": {
                    "description": "If true, the continue statement style of the opened file will be checked.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.styleCheck.breakStatement.enable": {
                    "description": "If true, the break statement style of the opened file will be checked.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.styleCheck.enumDeclaration.enable": {
                    "description": "If true, the enum declaration style of the opened file will be checked.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.styleCheck.tryStatement.enable": {
                    "description": "If true, the try statement style of the opened file will be checked.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.projectsOpen.groups": {
                    "description": "Array of groups used to open projects (by selecting 'Open Projects' in command palette), each group contains a 'name' and a list of 'projects', and each project contains a 'name' and a 'fsPath'.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the group. Used to show in the select list."
                            },
                            "projects": {
                                "type": "array",
                                "description": "The projects in the group.",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "description": "The name of the project. Used to show in the select list."
                                        },
                                        "fsPath": {
                                            "type": "string",
                                            "description": "The path of the project which will be opened, supports path alias '~'."
                                        }
                                    },
                                    "required": [
                                        "fsPath"
                                    ]
                                }
                            }
                        },
                        "required": [
                            "name",
                            "projects"
                        ]
                    }
                },
                "sower-tools.projectsOpen.style": {
                    "description": "The view style of the projects shown in the select list.",
                    "type": "string",
                    "enum": [
                        "groups",
                        "flat"
                    ],
                    "enumDescriptions": [
                        "Show groups at first, after selecting a group, show projects in the group.",
                        "Show projects of all groups in a flat list and a separator between groups."
                    ],
                    "default": "flat"
                },
                "sower-tools.timestampTools.timestampFormat": {
                    "description": "The timestamp format used in timestamp insertion or conversion. See more details in https://day.js.org/docs/en/display/format.",
                    "type": "string",
                    "default": "YYYY-MM-DD HH:mm:ss"
                },
                "sower-tools.configSync.cursor.enable": {
                    "description": "Whether to enable sync cursor files.",
                    "type": "boolean",
                    "default": false
                },
                "sower-tools.configSync.cursor.profile": {
                    "description": "The profile information of the cursor.",
                    "type": "object",
                    "properties": {
                        "profileDirPath": {
                            "type": "string",
                            "description": "The path of the cursor profile, supports path alias '~'."
                        },
                        "storage": {
                            "type": "object",
                            "description": "The project which will used to store the cursor profile and sync it with remote repository.",
                            "properties": {
                                "projectRootDirPath": {
                                    "type": "string",
                                    "description": "The path of the storage project root directory, supports path alias '~'."
                                },
                                "dirName": {
                                    "type": "string",
                                    "description": "The name of the storage directory, supports multiple directories separated by '/'."
                                }
                            },
                            "required": [
                                "projectRootDirPath",
                                "dirName"
                            ]
                        }
                    },
                    "required": [
                        "profileDirPath",
                        "storage"
                    ]
                },
                "sower-tools.projectEnhancement.projectSnapshot.enable": {
                    "description": "Whether to enable project snapshot.",
                    "type": "boolean",
                    "default": false
                },
                "sower-tools.projectEnhancement.projectSnapshot.maxLegacyVersions": {
                    "description": "Max legacy versions, if the file snapshots exceed this value, the older legacy versions will be deleted.",
                    "type": "number",
                    "default": 50
                },
                "sower-tools.projectEnhancement.projectSnapshot.snapshotRootPath": {
                    "description": "The root path of the project snapshot, each project snapshots saved in a sub-folder named according to project folder path, supports path alias '~'.",
                    "type": "string",
                    "default": "~/.project-snapshots"
                },
                "sower-tools.projectEnhancement.projectSnapshot.ignorePatterns": {
                    "description": "The 'glob' patterns of files or directories that will be ignored when saving project snapshot, the priority is higher than configured items in 'sower-tools.projectEnhancement.projectSnapshot.ignoreCompatibleConfigFilenames'.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "node_modules/",
                        "dist/",
                        "build/",
                        ".git/"
                    ]
                },
                "sower-tools.projectEnhancement.projectSnapshot.ignoreCompatibleConfigFilenames": {
                    "description": "The compatible config filenames that their contents will be split by line and added to the ignore list of project snapshot. The priority is lower than configured items in 'sower-tools.projectEnhancement.projectSnapshot.ignorePatterns'.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        ".gitignore"
                    ]
                },
                "sower-tools.apiRequestAssistant.envVariablesReference.enable": {
                    "description": "Whether to enable env variables reference.",
                    "type": "boolean",
                    "default": false
                },
                "sower-tools.apiRequestAssistant.envVariablesReference.envVariablesDirRelativePath": {
                    "description": "The relative path of the env variables directory to the project root directory.",
                    "type": "string",
                    "default": ".cached/envVariables"
                },
                "sower-tools.apiRequestAssistant.envVariablesReference.supportedProjectNames": {
                    "description": "The supported project names which will be used to find the env variables file.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "api-request"
                    ]
                },
                "sower-tools.apiRequestAssistant.envVariablesReference.ignoreProjectNames": {
                    "description": "The project names which will be ignored when showing the env variables reference.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": []
                }
            }
        }
    }
}
