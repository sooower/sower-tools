{
    "name": "sower-tools",
    "displayName": "Sower Tools",
    "description": "A collection of commonly used tools for VSCode.",
    "version": "0.17.0",
    "publisher": "Sower",
    "icon": "assets/icon.png",
    "repository": {
        "type": "git",
        "url": "https://github.com/sooower/sower-tools"
    },
    "license": "MIT",
    "engines": {
        "vscode": "^1.89.0"
    },
    "categories": [
        "Other"
    ],
    "activationEvents": [
        "onLanguage"
    ],
    "main": "./dist/extension.js",
    "contributes": {
        "commands": [
            {
                "command": "sower-tools.databaseModel.generateModel",
                "title": "Generate Model"
            },
            {
                "command": "sower-tools.databaseModel.updateModel",
                "title": "Update Model"
            },
            {
                "command": "sower-tools.debuggingEnhancement.debugProject",
                "title": "Debug Project",
                "icon": {
                    "dark": "./assets/debugProject-dark.svg",
                    "light": "./assets/debugProject-light.svg"
                }
            },
            {
                "command": "sower-tools.debuggingEnhancement.debugCurrentFile",
                "title": "Debug Current File",
                "icon": {
                    "dark": "./assets/debugCurrentFile-dark.svg",
                    "light": "./assets/debugCurrentFile-light.svg"
                }
            },
            {
                "command": "sower-tools.functionEnhancement.convertParametersToOptionsObject",
                "title": "Convert Parameters to Options Object"
            },
            {
                "command": "sower-tools.functionEnhancement.syncTypeMembers",
                "title": "Sync Type Members with References"
            },
            {
                "command": "sower-tools.generateEnumAssertionFunctions",
                "title": "Generate/Update Enum Assertions"
            },
            {
                "command": "sower-tools.generateTypeOfZodSchema",
                "title": "Generate Type of Zod Schema"
            },
            {
                "command": "sower-tools.gitEnhancement.skipWorkTree",
                "title": "Skip Work Tree"
            },
            {
                "command": "sower-tools.gitEnhancement.noSkipWorkTree",
                "title": "No Skip Work Tree"
            },
            {
                "command": "sower-tools.gitEnhancement.listFiles",
                "title": "List Files"
            },
            {
                "command": "sower-tools.timestampTool.covertTimestamp",
                "title": "Convert Timestamp"
            },
            {
                "command": "sower-tools.timestampTool.insertTimestamp",
                "title": "Insert Timestamp"
            },
            {
                "command": "sower-tools.stringTools.base64Encode",
                "title": "Base64 Encode"
            },
            {
                "command": "sower-tools.stringTools.base64Decode",
                "title": "Base64 Decode"
            },
            {
                "command": "sower-tools.syncChangelog",
                "title": "Sync Changelog"
            },
            {
                "command": "sower-tools.sortEnums",
                "title": "Sort Enums"
            },
            {
                "command": "sower-tools.keyCryptoTools.keyEncrypt",
                "title": "Encrypt Text"
            },
            {
                "command": "sower-tools.keyCryptoTools.keyDecrypt",
                "title": "Decrypt Text"
            },
            {
                "command": "sower-tools.apiResourcesGeneration.generateAPIResources",
                "title": "Generate API Resources"
            },
            {
                "command": "sower-tools.dirEnhancement.openFiles",
                "title": "Open Files"
            },
            {
                "command": "sower-tools.countdownTimer",
                "title": "Countdown Timer"
            },
            {
                "command": "sower-tools.markdownImageUpload.uploadImageToMinioStorage",
                "title": "Upload Image to Minio Storage"
            }
        ],
        "submenus": [
            {
                "id": "editor/context/sowerTools",
                "label": "Sower Tools"
            },
            {
                "id": "explorer/context/sowerTools",
                "label": "Sower Tools"
            },
            {
                "id": "explorer/context/sowerTools/Git",
                "label": "Git"
            }
        ],
        "menus": {
            "editor/context": [
                {
                    "group": "001_sowerTools@001",
                    "submenu": "editor/context/sowerTools"
                }
            ],
            "editor/context/sowerTools": [
                {
                    "command": "sower-tools.debuggingEnhancement.debugCurrentFile",
                    "group": "001_debuggingEnhancement@001",
                    "when": "resourceLangId == typescript"
                },
                {
                    "command": "sower-tools.debuggingEnhancement.debugProject",
                    "group": "001_debuggingEnhancement@002",
                    "when": "resourceLangId == typescript"
                },
                {
                    "command": "sower-tools.databaseModel.generateModel",
                    "group": "002_databaseModel@001",
                    "when": "editorTextFocus && editorHasSelection"
                },
                {
                    "command": "sower-tools.databaseModel.updateModel",
                    "group": "002_databaseModel@002",
                    "when": "resourceLangId == typescript && editorTextFocus  && !editorHasSelection"
                },
                {
                    "command": "sower-tools.functionEnhancement.convertParametersToOptionsObject",
                    "group": "003_functionEnhancement@001",
                    "when": "resourceLangId == typescript && editorTextFocus && !editorHasSelection"
                },
                {
                    "command": "sower-tools.functionEnhancement.syncTypeMembers",
                    "group": "003_functionEnhancement@002",
                    "when": "resourceLangId == typescript && editorTextFocus"
                },
                {
                    "command": "sower-tools.generateEnumAssertionFunctions",
                    "group": "003_functionEnhancement@003",
                    "when": "resourceLangId == typescript && editorTextFocus && !editorHasSelection"
                },
                {
                    "command": "sower-tools.generateTypeOfZodSchema",
                    "group": "003_functionEnhancement@004",
                    "when": "resourceLangId == typescript && editorTextFocus && !editorHasSelection"
                },
                {
                    "command": "sower-tools.timestampTool.covertTimestamp",
                    "group": "004_timestampTool@001",
                    "when": "editorTextFocus && editorHasSelection"
                },
                {
                    "command": "sower-tools.timestampTool.insertTimestamp",
                    "group": "004_timestampTool@002",
                    "when": "editorTextFocus && !editorHasSelection"
                },
                {
                    "command": "sower-tools.stringTools.base64Encode",
                    "group": "005_stringTools@001",
                    "when": "editorTextFocus && editorHasSelection"
                },
                {
                    "command": "sower-tools.stringTools.base64Decode",
                    "group": "005_stringTools@002",
                    "when": "editorTextFocus && editorHasSelection"
                },
                {
                    "command": "sower-tools.syncChangelog",
                    "group": "006_changelog@001",
                    "when": "resourceLangId == markdown && editorTextFocus"
                },
                {
                    "command": "sower-tools.sortEnums",
                    "group": "007_sortEnums@001",
                    "when": "resourceLangId == typescript && editorTextFocus"
                },
                {
                    "command": "sower-tools.keyCryptoTools.keyEncrypt",
                    "group": "008_keyCryptoTools@001",
                    "when": "editorTextFocus && editorHasSelection"
                },
                {
                    "command": "sower-tools.keyCryptoTools.keyDecrypt",
                    "group": "008_keyCryptoTools@002",
                    "when": "editorTextFocus && editorHasSelection"
                }
            ],
            "editor/title": [
                {
                    "command": "sower-tools.debuggingEnhancement.debugCurrentFile",
                    "group": "navigation@001",
                    "when": "resourceLangId == typescript"
                },
                {
                    "command": "sower-tools.debuggingEnhancement.debugProject",
                    "group": "navigation@002",
                    "when": "resourceLangId == typescript"
                }
            ],
            "explorer/context": [
                {
                    "group": "001_sowerTools@001",
                    "submenu": "explorer/context/sowerTools"
                }
            ],
            "explorer/context/sowerTools": [
                {
                    "group": "001_Git@001",
                    "submenu": "explorer/context/sowerTools/Git"
                },
                {
                    "command": "sower-tools.apiResourcesGeneration.generateAPIResources",
                    "group": "001_apiResourcesGeneration@001",
                    "when": "explorerResourceIsFolder == true"
                },
                {
                    "command": "sower-tools.dirEnhancement.openFiles",
                    "group": "001_dirEnhancement@001",
                    "when": "explorerResourceIsFolder == true"
                }
            ],
            "explorer/context/sowerTools/Git": [
                {
                    "command": "sower-tools.gitEnhancement.skipWorkTree",
                    "group": "001_gitEnhancement@001",
                    "when": "explorerResourceIsFolder == false && resourceLangId != ''"
                },
                {
                    "command": "sower-tools.gitEnhancement.noSkipWorkTree",
                    "group": "001_gitEnhancement@002",
                    "when": "explorerResourceIsFolder == false && resourceLangId != ''"
                },
                {
                    "command": "sower-tools.gitEnhancement.listFiles",
                    "group": "001_gitEnhancement@003"
                }
            ]
        },
        "configuration": {
            "type": "object",
            "title": "Sower Tools",
            "properties": {
                "sower-tools.uppercaseWordsMapping": {
                    "description": "Words pairs which will be used to map words when to uppercase, format: <originalWord>:<mappedWord>.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "Id:ID"
                    ]
                },
                "sower-tools.databaseModel.enableOverwriteFile": {
                    "description": "If true, it will replace file content with new generated text if the file exists.",
                    "type": "boolean",
                    "default": false
                },
                "sower-tools.databaseModel.ignoredInsertionColumns": {
                    "description": "Column names which will be ignored when calling models `insert()` method.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "createdAt",
                        "updatedAt"
                    ]
                },
                "sower-tools.databaseModel.ignoredUpdatingColumns": {
                    "description": "Column names which will be ignored when calling models `update()` method.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "id",
                        "createdAt",
                        "updatedAt"
                    ]
                },
                "sower-tools.debuggingEnhancement.debugProjectConfigurationNames": {
                    "description": "Configuration names of debugging the current opened project. The priority depends on the array element order, location is <projectRootDir>/.vscode/launch.json.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "Debug Project"
                    ]
                },
                "sower-tools.debuggingEnhancement.debugCurrentFileConfigurationNames": {
                    "description": "Configuration names of debugging the current opened file. The priority depends on the array element order, location is <projectRootDir>/.vscode/launch.json.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "Current TS File"
                    ]
                },
                "sower-tools.previewReadmeDocument.enable": {
                    "description": "If true, it will show project README document when open workspace.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.previewReadmeDocument.documentNames": {
                    "description": "Project README filenames, priority is by the order you placed in this array, configurations usually are README.md, CHANGELOG.md, etc.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "README.md",
                        "readme.md",
                        "CHANGELOG.md",
                        "changelog.md"
                    ]
                },
                "sower-tools.updateNodeBuiltinModulesImports.nodeBuiltinModules": {
                    "description": "Node builtin modules names.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "assert",
                        "async_hooks",
                        "buffer",
                        "child_process",
                        "cluster",
                        "console",
                        "constants",
                        "crypto",
                        "dgram",
                        "dns",
                        "domain",
                        "events",
                        "fs",
                        "http",
                        "http2",
                        "https",
                        "inspector",
                        "module",
                        "net",
                        "os",
                        "path",
                        "perf_hooks",
                        "process",
                        "punycode",
                        "querystring",
                        "readline",
                        "repl",
                        "stream",
                        "string_decoder",
                        "timers",
                        "tls",
                        "trace_events",
                        "tty",
                        "url",
                        "util",
                        "v8",
                        "vm",
                        "worker_threads",
                        "zlib"
                    ]
                },
                "sower-tools.updateNodeBuiltinModulesImports.enable": {
                    "description": "If true, it will update node builtin modules imports with prefix \"node:\" automatically when saving file.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.stringTools.enableReplaceText": {
                    "description": "If true, it will replace the selected text with converted text when encoding/decoding base64 string, otherwise it will insert the converted text after next line.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.showStatusBarNowTimestamp.enable": {
                    "description": "If true, it will show current timestamp in status bar.",
                    "type": "boolean",
                    "default": false
                },
                "sower-tools.keyCryptoTools.key": {
                    "description": "The default key for encrypt/decrypt text.",
                    "type": "string",
                    "default": ""
                },
                "sower-tools.dirEnhancement.openFiles.ignoredFilenames": {
                    "description": "The filenames of files that will be ignored when opening all files in a directory.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        ".DS_Store"
                    ]
                },
                "sower-tools.countdownTimer.options": {
                    "description": "The options of countdown timer.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                                "description": "The label of the option."
                            },
                            "duration": {
                                "type": "number",
                                "description": "The duration of the option in seconds."
                            }
                        }
                    },
                    "default": [
                        {
                            "label": "10 seconds",
                            "duration": 10
                        },
                        {
                            "label": "10 minutes",
                            "duration": 600
                        },
                        {
                            "label": "20 minutes",
                            "duration": 1200
                        },
                        {
                            "label": "40 minutes",
                            "duration": 2400
                        },
                        {
                            "label": "1 hour",
                            "duration": 3600
                        },
                        {
                            "label": "2 hours",
                            "duration": 7200
                        }
                    ]
                },
                "sower-tools.markdownImageUpload.enable": {
                    "description": "If true, it will check local image links in markdown files and provide a code action to upload them to minio storage.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.markdownImageUpload.configFilePath": {
                    "description": "The path of the config file of markdown image upload. Supports user home directory alias \"~\".",
                    "type": "string",
                    "default": "~/.config/sower-tools/.markdownImageUpload-config.json"
                }
            }
        }
    },
    "scripts": {
        "vscode:prepublish": "yarn run package",
        "compile": "yarn run check-types && yarn run lint && node esbuild.js",
        "watch": "npm-run-all -p watch:*",
        "watch:esbuild": "node esbuild.js --watch",
        "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
        "package": "yarn run check-types && yarn run lint && node esbuild.js --production",
        "compile-tests": "tsc -p . --outDir out",
        "watch-tests": "tsc -p . -w --outDir out",
        "pretest": "yarn run compile-tests && yarn run compile && yarn run lint",
        "check-types": "tsc --noEmit",
        "lint": "eslint src --ext ts",
        "format": "prettier --ignore-path .prettierignore --write './src/**/*.{ts,js}'",
        "test": "vscode-test"
    },
    "devDependencies": {
        "@types/markdown-it": "^14.1.1",
        "@types/mocha": "^10.0.6",
        "@types/node": "18.x",
        "@types/pluralize": "^0.0.33",
        "@types/prettier": "2.7.1",
        "@types/vscode": "^1.89.0",
        "@typescript-eslint/eslint-plugin": "^7.7.1",
        "@typescript-eslint/parser": "^7.7.1",
        "@vscode/test-cli": "^0.0.9",
        "@vscode/test-electron": "^2.3.9",
        "esbuild": "^0.20.2",
        "eslint": "^8.57.0",
        "eslint-plugin-import": "^2.31.0",
        "eslint-plugin-perfectionist": "^4.4.0",
        "npm-run-all": "^4.1.5",
        "ts-node": "^10.9.2",
        "tsconfig-paths": "^4.2.0",
        "typescript": "^5.4.5"
    },
    "dependencies": {
        "@utils/command": "^0.2.2",
        "@utils/common": "^0.2.6",
        "@utils/datetime": "^0.2.4",
        "@utils/fs": "^0.3.2",
        "@utils/json": "^0.4.2",
        "markdown-it": "^14.1.0",
        "minio": "^8.0.4",
        "pluralize": "^8.0.0",
        "prettier": "2.8.8",
        "remark-parse": "^11.0.0",
        "unist-util-visit": "^5.0.0",
        "zod": "^3.24.1"
    },
    "extensionDependencies": [
        "shd101wyy.markdown-preview-enhanced"
    ],
    "vsce": {
        "yarn": true
    }
}
