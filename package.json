{
    "name": "sower-tools",
    "displayName": "Sower Tools",
    "description": "A collection of commonly used tools for VSCode.",
    "version": "0.12.12",
    "publisher": "Sower",
    "icon": "./assets/icon.png",
    "repository": {
        "type": "git",
        "url": "http://gitea.sower.fun/vsc-extensions/sower-tools.git"
    },
    "license": "MIT",
    "engines": {
        "vscode": "^1.89.0"
    },
    "categories": [
        "Other"
    ],
    "activationEvents": [
        "onLanguage"
    ],
    "main": "./dist/extension.js",
    "contributes": {
        "commands": [
            {
                "command": "sower-tools.databaseModel.generateModel",
                "title": "Generate Model"
            },
            {
                "command": "sower-tools.databaseModel.updateModel",
                "title": "Update Model"
            },
            {
                "command": "sower-tools.debuggingEnhancement.debugProject",
                "title": "Debug Project",
                "icon": {
                    "dark": "./assets/debugProject-dark.svg",
                    "light": "./assets/debugProject-light.svg"
                }
            },
            {
                "command": "sower-tools.debuggingEnhancement.debugCurrentFile",
                "title": "Debug Current File",
                "icon": {
                    "dark": "./assets/debugCurrentFile-dark.svg",
                    "light": "./assets/debugCurrentFile-light.svg"
                }
            },
            {
                "command": "sower-tools.functionEnhancement.convertParametersToOptionsObject",
                "title": "Convert Parameters to Options Object"
            },
            {
                "command": "sower-tools.functionEnhancement.updateTypeMemberNames",
                "title": "Update Type Member Names"
            },
            {
                "command": "sower-tools.generateEnumAssertionFunction",
                "title": "Generate/Update Enum Assertion"
            },
            {
                "command": "sower-tools.generateTypeSchema",
                "title": "Generate Type of Schema"
            },
            {
                "command": "sower-tools.gitEnhancement.skipWorkTree",
                "title": "Skip Work Tree"
            },
            {
                "command": "sower-tools.gitEnhancement.noSkipWorkTree",
                "title": "No Skip Work Tree"
            },
            {
                "command": "sower-tools.gitEnhancement.listFiles",
                "title": "List Files"
            },
            {
                "command": "sower-tools.timestampTool.covertTimestamp",
                "title": "Convert Timestamp"
            },
            {
                "command": "sower-tools.timestampTool.insertTimestamp",
                "title": "Insert Timestamp"
            },
            {
                "command": "sower-tools.stringTools.base64Encode",
                "title": "Base64 Encode"
            },
            {
                "command": "sower-tools.stringTools.base64Decode",
                "title": "Base64 Decode"
            },
            {
                "command": "sower-tools.syncChangelog",
                "title": "Sync Changelog"
            },
            {
                "command": "sower-tools.sortEnums",
                "title": "Sort Enums"
            }
        ],
        "submenus": [
            {
                "id": "editor/context/sowerTools",
                "label": "Sower Tools"
            },
            {
                "id": "explorer/context/sowerTools",
                "label": "Sower Tools"
            }
        ],
        "menus": {
            "editor/context": [
                {
                    "group": "001_sowerTools@001",
                    "submenu": "editor/context/sowerTools"
                }
            ],
            "editor/context/sowerTools": [
                {
                    "command": "sower-tools.debuggingEnhancement.debugCurrentFile",
                    "group": "001_debuggingEnhancement@001",
                    "when": "resourceLangId == typescript"
                },
                {
                    "command": "sower-tools.debuggingEnhancement.debugProject",
                    "group": "001_debuggingEnhancement@002",
                    "when": "resourceLangId == typescript"
                },
                {
                    "command": "sower-tools.databaseModel.generateModel",
                    "group": "002_databaseModel@001",
                    "when": "editorTextFocus && editorHasSelection"
                },
                {
                    "command": "sower-tools.databaseModel.updateModel",
                    "group": "002_databaseModel@002",
                    "when": "resourceLangId == typescript && editorTextFocus  && !editorHasSelection"
                },
                {
                    "command": "sower-tools.functionEnhancement.convertParametersToOptionsObject",
                    "group": "003_functionEnhancement@001",
                    "when": "resourceLangId == typescript && editorTextFocus && !editorHasSelection"
                },
                {
                    "command": "sower-tools.functionEnhancement.updateTypeMemberNames",
                    "group": "003_functionEnhancement@002",
                    "when": "resourceLangId == typescript && editorTextFocus"
                },
                {
                    "command": "sower-tools.generateEnumAssertionFunction",
                    "group": "003_functionEnhancement@003",
                    "when": "resourceLangId == typescript && editorTextFocus && !editorHasSelection"
                },
                {
                    "command": "sower-tools.generateTypeSchema",
                    "group": "003_functionEnhancement@004",
                    "when": "resourceLangId == typescript && editorTextFocus && !editorHasSelection"
                },
                {
                    "command": "sower-tools.timestampTool.covertTimestamp",
                    "group": "004_timestampTool@001",
                    "when": "editorTextFocus && editorHasSelection"
                },
                {
                    "command": "sower-tools.timestampTool.insertTimestamp",
                    "group": "004_timestampTool@002",
                    "when": "editorTextFocus && !editorHasSelection"
                },
                {
                    "command": "sower-tools.stringTools.base64Encode",
                    "group": "005_stringTools@001",
                    "when": "editorTextFocus && editorHasSelection"
                },
                {
                    "command": "sower-tools.stringTools.base64Decode",
                    "group": "005_stringTools@002",
                    "when": "editorTextFocus && editorHasSelection"
                },
                {
                    "command": "sower-tools.syncChangelog",
                    "group": "006_changelog@001",
                    "when": "resourceLangId == markdown && editorTextFocus"
                },
                {
                    "command": "sower-tools.sortEnums",
                    "group": "007_sortEnums@001",
                    "when": "resourceLangId == typescript && editorTextFocus"
                }
            ],
            "editor/title": [
                {
                    "command": "sower-tools.debuggingEnhancement.debugCurrentFile",
                    "group": "navigation@001",
                    "when": "resourceLangId == typescript"
                },
                {
                    "command": "sower-tools.debuggingEnhancement.debugProject",
                    "group": "navigation@002",
                    "when": "resourceLangId == typescript"
                }
            ],
            "explorer/context": [
                {
                    "group": "001_sowerTools@001",
                    "submenu": "explorer/context/sowerTools"
                }
            ],
            "explorer/context/sowerTools": [
                {
                    "command": "sower-tools.gitEnhancement.skipWorkTree",
                    "group": "001_gitEnhancement@001",
                    "when": "explorerResourceIsFolder == false && resourceLangId != ''"
                },
                {
                    "command": "sower-tools.gitEnhancement.noSkipWorkTree",
                    "group": "001_gitEnhancement@002",
                    "when": "explorerResourceIsFolder == false && resourceLangId != ''"
                },
                {
                    "command": "sower-tools.gitEnhancement.listFiles",
                    "group": "001_gitEnhancement@003"
                }
            ]
        },
        "configuration": {
            "type": "object",
            "title": "Sower Tools",
            "properties": {
                "sower-tools.databaseModel.enableOverwriteFile": {
                    "description": "If true, it will replace file content with new generated text.",
                    "type": "boolean",
                    "default": false
                },
                "sower-tools.databaseModel.specialUpperCaseWordsMapping": {
                    "description": "Special words pairs which will be mapped automatically when to uppercase, format: <originalWord>:<mappedWord>.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "Id:ID"
                    ]
                },
                "sower-tools.databaseModel.ignoredInsertionColumns": {
                    "description": "Special column names which will be ignored when inserting record.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "createdAt",
                        "updatedAt"
                    ]
                },
                "sower-tools.debuggingEnhancement.debugProjectConfigurationNames": {
                    "description": "Configuration names of debugging the current opened project. The priority depends on the array element order, location is <projectRootDir>/.vscode/launch.json.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "Debug Project"
                    ]
                },
                "sower-tools.debuggingEnhancement.debugCurrentFileConfigurationNames": {
                    "description": "Configuration names of debugging the current opened file. The priority depends on the array element order, location is <projectRootDir>/.vscode/launch.json.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "Current TS File"
                    ]
                },
                "sower-tools.showDefaultOpenedDocument.enable": {
                    "description": "If true, it will show default opened document when open workspace.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.showDefaultOpenedDocument.documentNames": {
                    "description": "Default opened filenames, priority is by the order you placed in this array, configurations usually are  description or specification file of your project.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "README.md",
                        "readme.md",
                        "CHANGELOG.md",
                        "changelog.md"
                    ]
                },
                "sower-tools.updateImports.nodeBuiltinModules": {
                    "description": "Node builtin module names.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "assert",
                        "async_hooks",
                        "buffer",
                        "child_process",
                        "cluster",
                        "console",
                        "constants",
                        "crypto",
                        "dgram",
                        "dns",
                        "domain",
                        "events",
                        "fs",
                        "http",
                        "http2",
                        "https",
                        "inspector",
                        "module",
                        "net",
                        "os",
                        "path",
                        "perf_hooks",
                        "process",
                        "punycode",
                        "querystring",
                        "readline",
                        "repl",
                        "stream",
                        "string_decoder",
                        "timers",
                        "tls",
                        "trace_events",
                        "tty",
                        "url",
                        "util",
                        "v8",
                        "vm",
                        "worker_threads",
                        "zlib"
                    ]
                },
                "sower-tools.updateImports.enableUpdateNodeBuiltinImports": {
                    "description": "If true, it will update node builtin imports with prefix \"node:\" automatically when saving file.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.stringTools.enableReplaceText": {
                    "description": "If true, it will replace the selected text with converted text when encoding/decoding base64 string, otherwise it will insert the converted text after next line.",
                    "type": "boolean",
                    "default": true
                },
                "sower-tools.showNowTimestamp.enable": {
                    "description": "If true, it will show current timestamp in status bar.",
                    "type": "boolean",
                    "default": false
                }
            }
        }
    },
    "scripts": {
        "vscode:prepublish": "yarn run package",
        "compile": "yarn run check-types && yarn run lint && node esbuild.js",
        "watch": "npm-run-all -p watch:*",
        "watch:esbuild": "node esbuild.js --watch",
        "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
        "package": "yarn run check-types && yarn run lint && node esbuild.js --production",
        "compile-tests": "tsc -p . --outDir out",
        "watch-tests": "tsc -p . -w --outDir out",
        "pretest": "yarn run compile-tests && yarn run compile && yarn run lint",
        "check-types": "tsc --noEmit",
        "lint": "eslint src --ext ts",
        "test": "vscode-test"
    },
    "devDependencies": {
        "@types/markdown-it": "^14.1.1",
        "@types/mocha": "^10.0.6",
        "@types/node": "18.x",
        "@types/prettier": "2.7.1",
        "@types/vscode": "^1.89.0",
        "@typescript-eslint/eslint-plugin": "^7.7.1",
        "@typescript-eslint/parser": "^7.7.1",
        "@vscode/test-cli": "^0.0.9",
        "@vscode/test-electron": "^2.3.9",
        "esbuild": "^0.20.2",
        "eslint": "^8.57.0",
        "npm-run-all": "^4.1.5",
        "ts-node": "^10.9.2",
        "tsconfig-paths": "^4.2.0",
        "typescript": "^5.4.5"
    },
    "dependencies": {
        "@utils/common": "^0.2.4",
        "comment-json": "^4.2.3",
        "dayjs": "^1.11.11",
        "markdown-it": "^14.1.0",
        "prettier": "2.8.8",
        "remark-parse": "^11.0.0",
        "unist-util-visit": "^5.0.0"
    },
    "extensionDependencies": [
        "shd101wyy.markdown-preview-enhanced",
        "mike-co.import-sorter"
    ]
}
